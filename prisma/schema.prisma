datasource db {
    provider = "mongodb"
    url      = env("MONGODB_URI")
}

generator client {
    provider = "prisma-client-js"
}

type AnalysisItem {
    type  String
    value Int
}

enum AnalysisType {
    DAILY
    MONTHLY
}

model User {
    id        String     @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    email     String     @unique
    name      String
    password  String
    avatar    String?
    TimeNode  TimeNode[]
    Analysis  Analysis[]
    Schedule  Schedule[]
    report    Report[]
}

model TimeNode {
    id         String    @id @default(auto()) @map("_id") @db.ObjectId
    createdAt  DateTime  @default(now())
    updatedAt  DateTime  @updatedAt
    date       DateTime
    time       Int
    title      String
    note       String?
    type       String
    user       User      @relation(fields: [userId], references: [id])
    userId     String    @db.ObjectId
    Schedule   Schedule? @relation(fields: [scheduleId], references: [id])
    scheduleId String?   @db.ObjectId
    report     Report?   @relation(fields: [reportId], references: [id])
    reportId   String?   @db.ObjectId
}

model Analysis {
    id        String         @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime       @default(now())
    updatedAt DateTime       @updatedAt
    time      DateTime
    type      AnalysisType
    items     AnalysisItem[]
    user      User           @relation(fields: [userId], references: [id])
    userId    String         @db.ObjectId
}

model Schedule {
    id        String     @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    month     DateTime
    timeline  TimeNode[]
    user      User       @relation(fields: [userId], references: [id])
    userId    String     @db.ObjectId
}

model Report {
    id        String     @id @default(auto()) @map("_id") @db.ObjectId
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    month     DateTime
    timeline  TimeNode[]
    user      User       @relation(fields: [userId], references: [id])
    userId    String     @db.ObjectId
}
